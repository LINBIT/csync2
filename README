
Installing csync2
=================

Requirements:

	- A linux system (or more/less compatible os)
	- The librsync package (incl. dev headers, at least version 0.9.5)
	- The sqlite package (incl. dev headers, at least version 2.8.13)

Build and install the binaries using:

	make install

Add the csync2 port to your /etc/services file:

	csync2	30865/tcp

Add csync2 to your /etc/inetd.conf file:

	csync2 stream tcp nowait root /usr/local/sbin/csync2 csync2 -i

Create your /etc/csync2.cfg and restart inetd.


csync2.cfg syntax
=================

The config file contains the definitions for all the syncronisation
groups in the cluster:

group
{
	host host1 host2 host3;
	host host4@host4-eth2;
	key /etc/csync2.key_mygroup;
	include /home/bob;
	exclude /home/bob/temp;
	exclude *~ .*;
}

The host statement adds the hosts. Note that the names used here must
equal to the output of "hostname". If the hostname used for communication
is different from the output of the "hostname" command (e.g. if a
crossover cable with other IP addresses should be used), the syntax
"hostname@hostname-for-communication" can be used.

The key statement must be used exactly once in each group and defines
the file containing shared secret for that group. The keyfile can be
created using "csync2 -k keyfilename".

The include and exclude pattern are a bit more complex. There are two
kind of patterns: pathname-patterns starting with a slash character and
basename patterns which do not.

The last matching pattern for each of both categories is choosen. If
both categories match, the file will be synchonized.

Changing the config files might imply some difficults if files are beeing
excluded which are already in the database. On strategy to solve that is
removing the files in question directly from the database (see seperate
section).  Another possible solution is the first synchronize all hosts,
then make the changes and remove the database files from /var/lib/csync2/
and re-create them with "csync2 -x". This will try to re-sync all files
between the host but wont actually re-transmit all the data because the
files are already the same.


Using csync2
============

Simply calling csync2 without any parameters prints out a brief usage
info.

Sorry, the rest of this section still needs to be written.


The database backend
====================

Sometimes it is neccessary to connect to the database backend; e.g. if
you changed your config and want to flush now obsolate entries from the
backend database. You need the sqlite command-line tool to open the
database:

	# sqlite /var/lib/csync2/$HOSTNAME.db

This opens up an SQL shell where you can access the database using
standard SQL queries.

