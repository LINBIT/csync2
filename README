
About csync2
============

Csync2 is a cluster synchronization tool. It can be used to keep files on
multiple hosts in a cluster in sync. Csync2 can handle complex setups with
much more than just 2 hosts, handle file deletions and can detect conflicts.

It is expedient for HA-clusters, HPC-clusters, COWs and server farms. If
you are looking for a tool to sync your laptop with your workstation, you
better have a look at Unison (http://www.cis.upenn.edu/~bcpierce/unison/)
too.

See http://oss.linbit.com/ for more information on csync2. The csync2
subversion tree can be found at http://svn.clifford.at/csync2/.


Copyright
=========

csync2 - cluster synchronisation tool, 2nd generation
LINBIT Information Technologies GmbH <http://www.linbit.com>
Copyright (C) 2004  Clifford Wolf <clifford@clifford.at>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


Installing csync2
=================

Requirements:

	- A linux system (or more/less compatible os)
	- The librsync package (incl. dev headers, at least version 0.9.5)
	- The sqlite package (incl. dev headers, at least version 2.8.13)

Build and install the binaries using:

	make install

Add the csync2 port to your /etc/services file:

	csync2	30865/tcp

Add csync2 to your /etc/inetd.conf file:

	csync2 stream tcp nowait root /usr/local/sbin/csync2 csync2 -i

Create your /etc/csync2.cfg and restart inetd.

Maybe you also want to add csync2_locheck.sh to your /root/.bash_logout
file to make sure that you never logout without syncing your changes.


csync2.cfg syntax
=================

The config file contains the definitions for all the synchronisation
groups in the cluster:

group
{
	host host1 host2 host3;
	host host4@host4-eth2;

	key /etc/csync2.key_mygroup;

	include /etc/apache;
	include /home/bob;
	exclude /home/bob/temp;
	exclude *~ .*;

	action {
		pattern /etc/apache/httpd.conf;
		pattern /etc/apache/sites-available/*;
		exec "/usr/sbin/apache2ctl graceful";
		logfile "/var/log/csync2_action.log";
		do-local;
	}
}

config /etc/csync2.cfg_anotherone;
config /etc/csync2.cfg_foo /etc/csync2.cfg_bar;

The host statement adds the hosts. Note that the names used here must
equal to the output of "hostname". If the hostname used for communication
is different from the output of the "hostname" command (e.g. if a
crossover cable with other IP addresses should be used), the syntax
"hostname@hostname-for-communication" can be used.

The key statement must be used exactly once in each group and defines
the file containing shared secret for that group. The keyfile can be
created using "csync2 -k keyfilename".

The include and exclude pattern are a bit more complex. There are two
kind of patterns: pathname-patterns starting with a slash character and
basename patterns which do not.

The last matching pattern for each of both categories is choosen. If
both categories match, the file will be synchonized.

The config keyword can be used to include another config file in this one.

Changing the config files might imply some difficults if files are beeing
excluded which are already in the database. On strategy to solve that is
removing the files in question directly from the database (see seperate
section).  Another possible solution is the first synchronize all hosts,
then make the changes and remove the database files from /var/lib/csync2/
and re-create them with "csync2 -x". This will try to re-sync all files
between the host but wont actually re-transmit all the data because the
files are already the same.

Additionally a group can have action sections. Each action section has a
list of patterns and a list of commands. If any of the patterns do match
an updated file, the commands will be executed. On default, the ouput of
the commands is sent to /dev/null, however: A logfile can be specified. If
the keyword "do-local" is present in the action section, the command will
also be executed on the machine where the change has happened locally. If
the special token "%%" is present in the command text, it will be replaced
by a list of the updated files.


The synchronization method
==========================

Sorry, this section still needs to be written.


Using csync2
============

Simply calling csync2 without any parameters prints out a brief usage
info. Running "csync2 -x" will sync local changes to the other hosts.

Sorry, the rest of this section still needs to be written.


The database backend
====================

Sometimes it is neccessary to connect to the database backend; e.g. if
you changed your config and want to flush now obsolate entries from the
backend database. You need the sqlite command-line tool to open the
database:

	# sqlite /var/lib/csync2/$HOSTNAME.db

This opens up an SQL shell where you can access the database using
standard SQL queries.

Csync2 is using single transactions for every database operations. So
creating the database in the first place might take a huge amount of
time and create some noticeable I/O load. It is possible to minimize
this problem by creating the database on a tmpfs (using the -D option)
and copying the database file to /var/lib/csync2/ afterwards.

